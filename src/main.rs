use std::io;
use std::iter;
use std::{thread, time::Duration};

macro_rules! zip {
    ( @closure $p:pat => $tup:expr ) => {
        |$p| $tup
    };

    // The "b" identifier is a different identifier on each recursion level thanks to hygiene.
    ( @closure $p:pat => ( $($tup:tt)* ) , $_iter:expr $( , $tail:expr )* ) => {
        zip!(@closure ($p, b) => ( $($tup)*, b ) $( , $tail )*)
    };

    ( $first:expr $( , $rest:expr )* $(,)* ) => {
        $crate::iter::IntoIterator::into_iter($first)
            $(
                .zip($rest)
            )*
            .map(
                zip!(@closure a => (a) $( , $rest )*)
            )
    };
}

fn main() {
    let text = "snake";
    
    let text = match text.len() {
        0 => String::from("     "),
        1 => format!("{}  {} ", text, text),
        _ => format!("{} {}", text, &text[0..2]),
    };
    let max_char_index = text.len()-2;
    let mut char_index = 0usize;
    let mut pixel_offset: u8 = 0;
    
    let mut matrix = [0u8; 8];
    
    fn print_matrix(&matrix: &[u8; 8]) {
        for byte in matrix {
            for bit in (0..8).rev() {
                match byte >> bit & 0b00000001 {
                    0 => print!(". "),
                    _ => print!("@ "),
                }
            }
            println!();
        }
    }
    
    let font = [
        0u16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0b0000_0000_0000_0000, // <space> 32
        0b0100_0100_0000_0100, // !
        0b1010_1010_0000_0000, // "
        0b1010_1110_1110_1010, // # 35
        0b1110_1100_0110_1110, // $
        0b1010_0110_1100_1010, // %
        0b1100_1110_1100_1110, // &
        0b0100_0100_0000_0000, // '
        0b0100_1000_1000_0100, // ( 40
        0b0100_0010_0010_0100, // )
        0b0100_1110_1100_0000, // *
        0b0100_1110_0100_0000, // +
        0b0000_0000_0100_1000, // ,
        0b0000_1110_0000_0000, // - 45
        0b0000_0000_0000_0100, // .
        0b0010_0110_1100_1000, // /
        0b1110_1010_1010_1110, // 0
        0b1100_0100_0100_1110, // 1
        0b1100_0010_1000_1110, // 2
        0b1110_0010_0110_1110, // 3
        0b1010_1010_1110_0010, // 4
        0b1110_1000_0010_1100, // 5
        0b1110_1000_1110_1110, // 6
        0b1110_0010_0100_0100, // 7
        0b1110_1010_1110_1110, // 8
        0b1110_1010_1110_0010, // 9
        0b0100_0000_0100_0000, // :
        0b0100_0000_0100_1100, // ;
        0b0000_0010_0100_1110, // <
        0b1110_0000_1110_0000, // =
        0b0000_1000_0100_1110, // >
        0b1110_0110_0000_0100, // ?
        0b1110_1110_1110_0110, // @
        0b0110_1010_1110_1010, // A
        0b1100_1010_1110_1110, // B
        0b1110_1000_1000_1110, // C
        0b1100_1010_1010_1100, // D
        0b1110_1000_1100_1110, // E
        0b1110_1000_1100_1000, // F
        0b0110_1000_1010_1110, // G
        0b1010_1110_1010_1010, // H
        0b1110_0100_0100_1110, // I
        0b0010_0010_1010_1100, // J
        0b1010_1100_1010_1010, // K
        0b1000_1000_1000_1110, // L
        0b1110_1110_1010_1010, // M
        0b1100_1010_1010_1010, // N
        0b0110_1010_1010_1100, // O
        0b1100_1010_1110_1000, // P
        0b0110_1010_1010_1110, // Q
        0b1110_1010_1100_1010, // R
        0b1110_1000_0010_1110, // S
        0b1110_0100_0100_0100, // T
        0b1010_1010_1010_0110, // U
        0b1010_1010_1010_0100, // V
        0b1010_1010_1110_1110, // W
        0b1010_0100_1010_1010, // X
        0b1010_1110_0100_0100, // Y
        0b1110_0010_1000_1110, // Z
        0b1100_1000_1000_1100, // [
        0b1000_1100_0110_0010, // \
        0b0110_0010_0010_0110, // ]
        0b0100_1010_0000_0000, // ^
        0b0000_0000_0000_1110, // _
        0b1000_0100_0000_0000, // `
        0b0110_1010_1110_1010, // a
        0b1100_1010_1110_1110, // b
        0b1110_1000_1000_1110, // c
        0b1100_1010_1010_1100, // d
        0b1110_1000_1100_1110, // e
        0b1110_1000_1100_1000, // f
        0b0110_1000_1010_1110, // g
        0b1010_1110_1010_1010, // h
        0b1110_0100_0100_1110, // i
        0b0010_0010_1010_1100, // j
        0b1010_1100_1010_1010, // k
        0b1000_1000_1000_1110, // l
        0b1110_1110_1010_1010, // m
        0b1100_1010_1010_1010, // n
        0b0110_1010_1010_1100, // o
        0b1100_1010_1110_1000, // p
        0b0110_1010_1010_1110, // q
        0b1110_1010_1100_1010, // r
        0b1110_1000_0010_1110, // s
        0b1110_0100_0100_0100, // t
        0b1010_1010_1010_0110, // u
        0b1010_1010_1010_0100, // v
        0b1010_1010_1110_1110, // w
        0b1010_0100_1010_1010, // x
        0b1010_1110_0100_0100, // y
        0b1110_0010_1000_1110, // z
        0b0100_1100_1000_0100, // {
        0b0100_0100_0100_0100, // |
        0b0100_0110_0010_0100, // }
        0b0000_1100_0110_0000, // ~
        0b0000_0000_0000_0000, // DEL
    ];
    
    // Program begin
    loop {
        for (row_iteration, row) in zip!(0..4, 1..=4) {
            let poo = &text[char_index..char_index+3];
            let mut pee: u16 = 0;
            
            pee |= font[poo.as_bytes()[0] as usize] << 4*row_iteration >> 0 & 0xf000;
            pee |= font[poo.as_bytes()[1] as usize] << 4*row_iteration >> 4 & 0x0f00;
            pee |= font[poo.as_bytes()[2] as usize] << 4*row_iteration >> 8 & 0x00f0;
            
            matrix[row] = (pee >> 8-pixel_offset) as u8;
        }
        
        print_matrix(&matrix);
        if pixel_offset + 1 == 4 {
            char_index = (char_index + 1) % max_char_index;
        }
        pixel_offset = (pixel_offset + 1) % 4;
        thread::sleep(Duration::from_millis(150));
//         io::stdin().read_line(&mut String::new()).expect("Failed to read line");
    }
    
    /*
    // go row-by-row
    //   find which chars to use by using: matrix width, 
    //   get the font part -> 111|0|101|0|010|0|101
    //   reducing it to the matrix size -> 101|0|010|0
    //   
    
    // "" ->    (0000 0000 0000)
    // "$" ->    1110(0000)0000 <%>
    // "$#" ->   1110 1010 0000 <%>
    // "$#!" ->  1110 1010 0100 0000 <%> 
    // "$#!%" -> 1110 1010 0100 1010 0000 <%>
    */
    
    /*
    let matrix = [
        0b10000001u8,
        0b01000010u8,
        0b00100100u8,
        0b00011000u8,
        0b00011000u8,
        0b00100100u8,
        0b01000010u8,
        0b10000001u8
    ];
    */
    
    /*
    
    
    print_matrix(&matrix);
    
    let text = "$#!%";
    
    for byte in text.bytes() {
        println!("{:?}", font[byte as usize]);
    }
    
    
    
    println!("!={} \"={} #={} $={} %={}", 0b0010_0010_0000_0010, 0b0101_0101_0000_0000, 0b0101_0111_0111_0101, 0b0111_0110_0011_0111, 0b0101_0011_0110_0101)
    */
    
}
